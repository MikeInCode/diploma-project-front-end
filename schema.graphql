# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type AcademicBaseUnit {
    id: ID!
    name: String!
    parentId: String
}

type AcademicExtendedUnit {
    code: String!
    id: ID!
    name: String!
    parentId: String
}

type AcademicUnits {
    departments: [AcademicBaseUnit!]!
    groups: [AcademicBaseUnit!]!
    institutes: [AcademicBaseUnit!]!
    specialities: [AcademicExtendedUnit!]!
}

type AuthenticatedUser {
    token: String!
    user: User!
}

type Chat {
    id: ID!
    interlocutor: ChatInterlocutor!
    lastMessage: Message
    unreadCount: Int!
}

type ChatInterlocutor {
    firstName: String!
    id: ID!
    image: String
    lastName: String!
}

type Department {
    id: ID!
    institute: UserAcademicBaseUnit!
    name: String!
}

type Evaluation {
    id: ID!
    marks: [EvaluationMark!]!
    scheduledSubject: EvaluationScheduledSubject!
    student: EvaluationStudent!
}

type EvaluationLesson {
    id: ID!
    startTime: String!
}

type EvaluationMark {
    id: ID!
    lesson: EvaluationLesson!
    notes: String
    value: MarkValueEnum!
}

type EvaluationScheduledSubject {
    id: ID!
    subject: Subject!
}

type EvaluationStudent {
    firstName: String!
    lastName: String!
    patronymicName: String!
}

type Group {
    course: CourseEnum!
    id: ID!
    name: String!
    speciality: Speciality!
}

type Lesson {
    endTime: String!
    id: ID!
    room: String!
    scheduledSubject: LessonScheduledSubject!
    startTime: String!
}

type LessonScheduledSubject {
    groups: [UserAcademicBaseUnit!]!
    id: ID!
    subject: Subject!
    teacher: LessonTeacher!
}

type LessonTeacher {
    department: Department!
    firstName: String!
    id: ID!
    lastName: String!
    patronymicName: String!
}

type Message {
    date: String!
    id: ID!
    isRead: Boolean!
    sender: ChatInterlocutor!
    text: String!
}

type Mutation {
    login(input: LoginInput!): AuthenticatedUser!
    readAllMessages(interlocutorId: ID!): Int!
    sendMessage(input: MessageInput!): Message!
    updateCreateMark(markData: MarkUpdateInput!, markId: ID): EvaluationMark!
    updateEvaluation(evaluationId: ID, input: [EvaluationUpdateInput]!): Evaluation!
    updateProfile(input: UpdateProfileInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
}

type Query {
    academicUnits: AcademicUnits!
    chats: [Chat!]!
    groups: [Group!]!
    messages(interlocutorId: ID!): [Message!]!
    profile(id: ID): User!
    schedule: [Lesson!]!
    studentMarks(studentId: ID, subjectId: ID): [Evaluation!]!
    studentSubjects: [StudentSubject!]!
    students(groupId: ID): [Student!]!
    teachers: [Teacher!]!
    teachersSubjects: [TeachersSubject!]!
}

type Speciality {
    code: String!
    department: Department!
    id: ID!
    name: String!
}

type Student {
    email: String
    firstName: String!
    group: Group!
    id: ID!
    image: String
    lastName: String!
    patronymicName: String!
    phone: String
}

type StudentSubject {
    evaluation: Evaluation
    subject: Subject!
    teacher: LessonTeacher!
}

type Subject {
    ECTS: String!
    id: ID!
    name: String!
    subjectCode: String!
    subjectType: SubjectTypeEnum!
}

type Subscription {
    chats: [Chat!]!
    message(interlocutorId: ID!): Message!
}

type Teacher {
    department: Department!
    email: String
    firstName: String!
    id: ID!
    image: String
    lastName: String!
    patronymicName: String!
    phone: String
    teacherScheduledSubjects: [TeacherScheduledSubject!]!
}

type TeacherScheduledSubject {
    id: ID!
    subject: Subject!
}

type TeachersSubject {
    groups: [TeachersSubjectGroup!]!
    subject: Subject!
}

type TeachersSubjectGroup {
    course: CourseEnum
    id: ID!
    name: String!
    students: [Student!]!
}

type User {
    course: CourseEnum
    department: UserAcademicBaseUnit
    email: String
    firstName: String!
    group: UserAcademicBaseUnit
    id: ID!
    image: String
    institute: UserAcademicBaseUnit!
    lastName: String!
    patronymicName: String!
    phone: String
    role: RolesEnum!
    speciality: UserAcademicExtendedUnit
    username: String!
}

type UserAcademicBaseUnit {
    id: ID!
    name: String!
}

type UserAcademicExtendedUnit {
    code: String!
    id: ID!
    name: String!
}

enum CourseEnum {
    FIVE
    FOUR
    ONE
    SIX
    THREE
    TWO
}

enum MarkValueEnum {
    EMPTY
    FIVE
    FOUR
    FOUR_AND_A_HALF
    THREE
    THREE_AND_A_HALF
    TWO
    TWO_AND_A_HALF
}

enum RolesEnum {
    ADMIN
    STUDENT
    TEACHER
}

enum SemestrEnum {
    SUMMER
    WINTER
}

enum SubjectTypeEnum {
    LABORATORY
    LECTURE
    SEMINAR
    TUTORIALS
}

input EvaluationUpdateInput {
    id: ID!
    value: MarkValueEnum!
}

input LoginInput {
    password: String!
    username: String!
}

input MarkUpdateInput {
    evaluationId: ID
    lessonId: ID
    notes: String
    value: MarkValueEnum!
}

input MessageInput {
    interlocutorId: ID!
    text: String!
}

input UpdateProfileInput {
    email: String!
    image: String!
    phone: String!
}

input UpdateUserInput {
    department: String
    email: String!
    firstName: String!
    group: String
    image: String!
    lastName: String!
    patronymicName: String!
    phone: String!
}
